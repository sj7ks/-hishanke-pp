// client.js - GOD LEVEL FRONTEND
// Handles products, cart, favorites, top lists, login/register, bug reports, multi-language support

const API_BASE = ''; // backend root
let userId = null;
let token = null;
let products = [];
let cart = [];
let favorites = [];
let lang = 'en'; // 'en', 'et', 'ru'

// LANGUAGE MESSAGES
const messages = {
  en: {
    loginSuccess: 'Login successful!',
    registerSuccess: 'Registered & logged in!',
    addCart: 'Added to cart!',
    stockCheck: qty => `Stock: ${qty}`,
    noStock: 'No stock',
    bugReport: 'Bug reported!',
    error: 'Error occurred'
  },
  et: {
    loginSuccess: 'Sisselogimine edukas!',
    registerSuccess: 'Registreerimine ja sisselogimine edukas!',
    addCart: 'Lisatud ostukorvi!',
    stockCheck: qty => `Laoseis: ${qty}`,
    noStock: 'Laos puudub',
    bugReport: 'Viga teatatud!',
    error: 'Tekkis viga'
  },
  ru: {
    loginSuccess: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
    registerSuccess: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!',
    addCart: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!',
    stockCheck: qty => `–ù–∞ —Å–∫–ª–∞–¥–µ: ${qty}`,
    noStock: '–ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ',
    bugReport: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
  }
};

// NOTIFICATIONS
function showNotification(msg, color = '#ff7eb9') {
  const notif = document.createElement('div');
  notif.className = 'notification';
  notif.style.background = color;
  notif.textContent = msg;
  document.body.appendChild(notif);
  notif.style.display = 'block';
  setTimeout(() => { notif.style.display='none'; notif.remove(); }, 3000);
}

// FETCH WITH AUTH
async function fetchAuth(url, options = {}) {
  options.headers = options.headers || {};
  if (token) options.headers['Authorization'] = `Bearer ${token}`;
  return fetch(url, options);
}

// LOGIN / REGISTER
async function login(email, password) {
  try {
    const res = await fetch(`${API_BASE}/login`, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({email, password})
    });
    const data = await res.json();
    if(data.ok) { token = document.cookie.split('token=')[1]; userId = data.userId; showNotification(messages[lang].loginSuccess,'#47d147'); loadProducts(); }
    else showNotification(data.error || messages[lang].error,'#ff4d6d');
  } catch(e) { showNotification(messages[lang].error,'#ff4d6d'); }
}

async function register(email, password) {
  try {
    const res = await fetch(`${API_BASE}/register`, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({email, password})
    });
    const data = await res.json();
    if(data.ok) { token = document.cookie.split('token=')[1]; userId = data.userId; showNotification(messages[lang].registerSuccess,'#47d147'); loadProducts(); }
    else showNotification(data.error || messages[lang].error,'#ff4d6d');
  } catch(e) { showNotification(messages[lang].error,'#ff4d6d'); }
}

// LOAD PRODUCTS
async function loadProducts() {
  try {
    const res = await fetchAuth(`${API_BASE}/products?userId=${userId}`);
    products = await res.json();
    favorites = products.filter(p => p.favorited).map(p => p.id);
    renderTopScroller();
    renderProducts();
    renderCart();
  } catch(e) { showNotification(messages[lang].error,'#ff4d6d'); }
}

// RENDER PRODUCTS
function renderProducts() {
  const container = document.querySelector('.products-container');
  container.innerHTML = '';
  products.forEach(p => {
    const card = document.createElement('div');
    card.className = 'product-card';
    card.innerHTML = `
      <div class="product-img">${p.image || 'Add Image'}</div>
      <h3>${p.name}</h3>
      <p>Price: $${p.price}</p>
      <p class="stock-text">${p.stock>0?p.stock+' in stock':messages[lang].noStock}</p>
      <div class="quantity-container">
        <button onclick="changeQty('${p.id}',-1)">-</button>
        <input type="number" value="1" min="1" max="${p.stock}" id="qty-${p.id}">
        <button onclick="changeQty('${p.id}',1)">+</button>
      </div>
      <div class="product-buttons">
        <button class="buy-btn" onclick="addToCart('${p.id}')">üõí Add</button>
        <button class="check-btn" onclick="checkStock('${p.id}')">Check</button>
        <button class="check-btn" onclick="toggleFavorite('${p.id}')">${favorites.includes(p.id)?'üíö':'ü§ç'}</button>
      </div>
    `;
    card.addEventListener('click', ()=>showProductPage(p));
    container.appendChild(card);
  });
}

// PRODUCT PAGE
function showProductPage(p) {
  const modal = document.createElement('div');
  modal.className = 'product-modal';
  modal.innerHTML = `
    <div class="modal-content">
      <span class="close" onclick="this.parentElement.parentElement.remove()">&times;</span>
      <h2>${p.name}</h2>
      <div class="product-img">${p.image || 'Add Image'}</div>
      <p>${p.description || 'No description available.'}</p>
      <p>Price: $${p.price}</p>
      <p class="stock-text">${p.stock>0?p.stock+' in stock':messages[lang].noStock}</p>
    </div>
  `;
  document.body.appendChild(modal);
}

// CHANGE QUANTITY
function changeQty(id, delta) {
  const input = document.getElementById(`qty-${id}`);
  let val = parseInt(input.value);
  val += delta;
  if(val<1) val=1;
  const max = parseInt(input.max)||9999;
  if(val>max) val=max;
  input.value = val;
}

// ADD TO CART
async function addToCart(id) {
  const qty = parseInt(document.getElementById(`qty-${id}`).value);
  try {
    const res = await fetchAuth(`${API_BASE}/cart/add`,{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({productId:id, quantity:qty})
    });
    const data = await res.json();
    if(data.ok) { cart=data.cart; showNotification(messages[lang].addCart,'#47d147'); renderCart(); }
    else showNotification(data.error||messages[lang].error,'#ff4d6d');
  } catch(e) { showNotification(messages[lang].error,'#ff4d6d'); }
}

// RENDER CART
function renderCart() {
  const dropdown = document.querySelector('.cart-dropdown');
  dropdown.innerHTML='';
  let total=0;
  cart.forEach(c=>{
    const p = products.find(x=>x.id===c.productId);
    if(!p) return;
    const itemTotal = p.price*c.quantity;
    total += itemTotal;
    const div = document.createElement('div');
    div.textContent = `${p.name} x${c.quantity} - $${itemTotal.toFixed(2)}`;
    dropdown.appendChild(div);
  });
  const totalDiv = document.createElement('div');
  totalDiv.style.fontWeight='700';
  totalDiv.style.marginTop='0.5rem';
  totalDiv.textContent=`Total: $${total.toFixed(2)}`;
  dropdown.appendChild(totalDiv);
}

// CART TOGGLE
document.getElementById('cart-icon').addEventListener('click', ()=>{
  const dropdown = document.querySelector('.cart-dropdown');
  dropdown.style.display = dropdown.style.display==='block'?'none':'block';
});

// CHECK STOCK
async function checkStock(id){
  try {
    const res = await fetchAuth(`${API_BASE}/check`,{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({productId:id})
    });
    const data = await res.json();
    if(data.ok){ showNotification(messages[lang].stockCheck(data.product.stock),'#ffb347'); loadProducts(); }
    else showNotification(data.error||messages[lang].error,'#ff4d6d');
  } catch(e) { showNotification(messages[lang].error,'#ff4d6d'); }
}

// FAVORITE TOGGLE
async function toggleFavorite(id){
  try {
    const res = await fetchAuth(`${API_BASE}/favorite`,{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({productId:id})
    });
    const data = await res.json();
    if(data.ok){
      if(favorites.includes(id)) favorites=favorites.filter(x=>x!==id);
      else favorites.push(id);
      renderProducts();
      renderTopScroller();
    }
  } catch(e){ showNotification(messages[lang].error,'#ff4d6d'); }
}

// BUG REPORT
async function reportBug(message){
  try {
    const res = await fetchAuth(`${API_BASE}/bug`,{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({message})
    });
    const data = await res.json();
    if(data.ok) showNotification(messages[lang].bugReport,'#47d147');
  } catch(e){ showNotification(messages[lang].error,'#ff4d6d'); }
}

// TOP SCROLLER
function renderTopScroller(){
  const container = document.querySelector('.top-scroller');
  container.innerHTML='';
  const topFaves = products.filter(p=>favorites.includes(p.id));
  const topBought = products.sort((a,b)=>b.soldCount-a.soldCount).slice(0,10);
  [...topFaves,...topBought].forEach(p=>{
    const div=document.createElement('div');
    div.className='product-card';
    div.innerHTML=`<h4>${p.name}</h4>`;
    container.appendChild(div);
  });
}

// INITIAL LOAD
window.addEventListener('DOMContentLoaded', ()=>{
  if(document.cookie.includes('token=')){
    token=document.cookie.split('token=')[1];
    loadProducts();
  }
});