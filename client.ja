// client.js - God Level Frontend Logic

const productsContainer = document.getElementById("products");
const topFavedContainer = document.getElementById("top-faved");
const cartIcon = document.getElementById("cart-icon");
const cartDropdown = document.getElementById("cart");
const notification = document.getElementById("notification");

let products = [];
let cart = [];
let favorites = [];

// Show notification
function showNotification(msg, duration=2000) {
    notification.textContent = msg;
    notification.style.display = "block";
    setTimeout(()=> notification.style.display="none", duration);
}

// Toggle cart
cartIcon.addEventListener("click", ()=> {
    cartDropdown.style.display = cartDropdown.style.display === "block" ? "none" : "block";
    renderCart();
});

// Fetch products
async function loadProducts() {
    try {
        const res = await fetch("/products");
        products = await res.json();
        renderTopFaved();
        renderProducts();
    } catch(err) {
        console.error(err);
        showNotification("Failed to load products");
    }
}

// Render main products
function renderProducts() {
    productsContainer.innerHTML = "";
    products.forEach(p=>{
        const card = document.createElement("div");
        card.className = "product-card";

        card.innerHTML = `
            <div class="product-image" style="width:140px;height:140px;display:flex;align-items:center;justify-content:center;background:#eee;border-radius:12px;margin-bottom:0.5rem;">
                ${p.image ? `<img src="${p.image}" alt="${p.name}" style="width:100%;height:100%;object-fit:cover;border-radius:12px;">` : "Add Image"}
            </div>
            <h3>${p.name}</h3>
            <p>$${p.price.toFixed(2)}</p>
            <div class="quantity-container">
                <button class="qty-btn" data-id="${p.id}" data-type="minus">-</button>
                <input type="text" class="quantity-input" value="1" data-id="${p.id}">
                <button class="qty-btn" data-id="${p.id}" data-type="plus">+</button>
            </div>
            <div class="product-buttons">
                <button class="buy-btn" data-id="${p.id}">Add to Cart</button>
                <button class="check-btn" data-id="${p.id}">Fav ❤️</button>
            </div>
            <div class="stock-text">${p.stock > 0 ? `Stock: ${p.stock}` : "No stock"}</div>
        `;

        // Product click to details
        card.addEventListener("click", (e)=>{
            if(e.target.tagName !== "BUTTON" && e.target.tagName !== "INPUT") {
                showNotification(`Clicked ${p.name}`);
            }
        });

        productsContainer.appendChild(card);
    });

    attachProductEvents();
}

// Render top faved horizontally
function renderTopFaved() {
    topFavedContainer.innerHTML = "";
    const topFaved = [...products].sort((a,b)=>b.favedCount-b.soldCount).slice(0,10);
    topFaved.forEach(p=>{
        const div = document.createElement("div");
        div.className = "product-card";
        div.style.minWidth = "200px";
        div.innerHTML = `
            <div style="width:100%;height:100px;display:flex;align-items:center;justify-content:center;background:#eee;border-radius:12px;margin-bottom:0.5rem;">
                ${p.image ? `<img src="${p.image}" alt="${p.name}" style="width:100%;height:100%;object-fit:cover;border-radius:12px;">` : "Add Image"}
            </div>
            <h3>${p.name}</h3>
            <p>$${p.price.toFixed(2)}</p>
        `;
        topFavedContainer.appendChild(div);
    });
}

// Cart render
function renderCart() {
    cartDropdown.innerHTML = "";
    if(cart.length===0) cartDropdown.textContent = "Cart empty";
    cart.forEach(item=>{
        const p = products.find(prod=>prod.id===item.id);
        const div = document.createElement("div");
        div.style.display="flex";
        div.style.justifyContent="space-between";
        div.style.marginBottom="0.5rem";
        div.innerHTML = `${p.name} x${item.qty} - $${(p.price*item.qty).toFixed(2)}`;
        cartDropdown.appendChild(div);
    });
}

// Attach events to product buttons
function attachProductEvents() {
    document.querySelectorAll(".buy-btn").forEach(btn=>{
        btn.addEventListener("click",(e)=>{
            e.stopPropagation();
            const id = parseInt(btn.dataset.id);
            const input = document.querySelector(`.quantity-input[data-id='${id}']`);
            const qty = parseInt(input.value);
            addToCart(id, qty);
        });
    });

    document.querySelectorAll(".check-btn").forEach(btn=>{
        btn.addEventListener("click",(e)=>{
            e.stopPropagation();
            const id = parseInt(btn.dataset.id);
            toggleFavorite(id);
        });
    });

    document.querySelectorAll(".qty-btn").forEach(btn=>{
        btn.addEventListener("click",(e)=>{
            const id = parseInt(btn.dataset.id);
            const input = document.querySelector(`.quantity-input[data-id='${id}']`);
            if(btn.dataset.type==="plus") input.value = parseInt(input.value)+1;
            else input.value = Math.max(1, parseInt(input.value)-1);
        });
    });
}

// Cart logic
function addToCart(id, qty) {
    const existing = cart.find(c=>c.id===id);
    if(existing) existing.qty += qty;
    else cart.push({id, qty});
    showNotification("Added to cart");
    renderCart();
}

// Favorite logic
function toggleFavorite(id) {
    const existing = favorites.find(f=>f===id);
    if(existing) {
        favorites = favorites.filter(f=>f!==id);
        showNotification("Removed from favorites");
    } else {
        favorites.push(id);
        showNotification("Added to favorites");
    }
}

// Prevent double-tap zoom
let lastTouch = 0;
document.addEventListener("touchend", function(event) {
    const now = Date.now();
    if(now-lastTouch<=300) event.preventDefault();
    lastTouch = now;
}, false);

loadProducts();